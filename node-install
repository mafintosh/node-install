#!/usr/bin/env bash

set -e
set -o pipefail

error () {
  echo "$@"
  exit 1
}

silent () {
  $@ > /dev/null 2> /dev/null
}

print-help () {
  echo "usage: node-install version"
}

list () {
  curl -fs https://nodejs.org/dist/ | grep v | grep -v npm | grep -v node- | grep -v latest | sed 's|/</a>.*||' | sed 's/.*>v//'
}

latest () {
  local major=$1
  local minor=0
  local patch=0

  for v in $(list); do
    local tmp=$IFS
    local IFS=.
    vs=($v)
    IFS=$tmp
    if [ $major -eq ${vs[0]} ]; then
      if [ ${vs[1]} -gt $minor ] || ([ ${vs[1]} -eq $minor ] && [ ${vs[2]} -gt $patch ]); then
        minor=${vs[1]}
        patch=${vs[2]}
      fi
    fi
  done

  echo $major.$minor.$patch
}

run () {
  [ $# = 0 ] && error "usage: node-install version"
  [ ! -d /usr/local/bin ] && error "/usr/local/bin does not exist"

  local version=$1
  local os=
  local arch=x86
  local force=false
  local list=false
  local dry_run=eval
  local rm_npm=false

  if silent [ "$version" -eq "$version" ]; then
    version=$(latest $version 2>/dev/null)
  fi

  if [ "$version" == "latest" ]; then
    version=$(curl -fs https://nodejs.org/dist/latest/ | grep node- | head -n1 | sed 's/.*node-v//' | sed 's/-.*//' || true)
  fi

  version=${version//v/}

  for opt in "$@"; do
    case "$opt" in
      --force)      force=true   ;;
      -f)           force=true   ;;
      --dry-run)    dry_run=echo ;;
      -d)           dry_run=echo ;;
      --list)       list=true    ;;
      -l)           list=true    ;;
      -r)           rm_npm=true  ;;
      --remove-npm) rm_npm=true  ;;
    esac
  done

  if ! $force && [ "$(node -v 2> /dev/null)" == "v$version" ] && [ "$dry_run" != "echo" ]; then
    echo node $(node -v) is now installed
    exit 0
  fi

  case "$(uname -a)" in
    Linux*)  os=linux  ;;
    Darwin*) os=darwin ;;
    SunOS*)  os=sunos  ;;
  esac

  case "$(uname -m)" in
    *armv7l*) arch=armv7l ;;
    *x86_64*) arch=x64    ;;
  esac

  if $list; then
    list
    return $?
  fi

  local url=https://nodejs.org/dist/v$version/node-v$version-$os-$arch.tar.gz
  local pkg_url=https://nodejs.org/dist/v$version/node-v$version.pkg # support older node versions
  local pkg_tmp=/tmp/node-$version.pkg

  [ ! -O /usr/local/bin ] && ! $force && [ "$(whoami)" = "root" ] && error "you are root and do not own /usr/local/bin\nuse --force to continue"
  [ ! -O /usr/local/bin ] && ! $force && error "you do not have permission to write to /usr/local/bin"

  if $rm_npm; then
    [ ! -O /usr/local/lib/node_modules/npm ] && ! $force && error "you do not have permission to delete /usr/local/lib/node_modules/npm"
    $dry_run rm -rf /usr/local/lib/node_modules/npm
  fi

  if ! silent curl -fsI $url; then
    if [ "$os" = "darwin" ] && silent curl -fsI $pkg_url; then
      $dry_run curl -fs $pkg_url \> $pkg_tmp \&\& silent sudo installer -pkg $pkg_tmp -target / && rm -f $pkg_tmp
    else
      error cannot find node $version
    fi
  else
    if [ "$os" = "darwin" ]; then
      $dry_run curl -fs $url \| tar xzPs \''|^[^/]*/|/usr/local/|'\' --include \''*/*/*'\'
    else
      $dry_run curl -fs $url \| tar xzP --xform \''s|^[^/]*/|/usr/local/|'\' --wildcards \''*/*/*'\'
    fi
  fi

  if [ $? != 0 ]; then
    exit 1
  fi

  if [ "$dry_run" == "eval" ]; then
    echo node $(node -v) is now installed
  fi
}

run "$@"
